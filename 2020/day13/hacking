#   Datum(value=601, idx_offset_from_max=0, original_idx=60),   601 60
#   Datum(value=577, idx_offset_from_max=-31, original_idx=29), 577 29
#   Datum(value=41, idx_offset_from_max=-41, original_idx=19),   41 19
#   Datum(value=37, idx_offset_from_max=37, original_idx=97),    37 97
#   Datum(value=29, idx_offset_from_max=-60, original_idx=0),    29  0
#   Datum(value=23, idx_offset_from_max=-8, original_idx=52),    23 52
#   Datum(value=19, idx_offset_from_max=-12, original_idx=48),   19 40
#   Datum(value=17, idx_offset_from_max=-17, original_idx=43),   17 43
#   Datum(value=13, idx_offset_from_max=-18, original_idx=42)    13 42


601 60
577 29
41 19
37 97
29  0
23 52
19 40
17 43
13 42

#!/usr/bin/env python

from functools import reduce


def chinese_remainder(n, a):
    sum = 0
    prod = reduce(lambda a, b: a*b, n)
    for n_i, a_i in zip(n, a):
        p = prod // n_i
        sum += a_i * mul_inv(p, n_i) * p
    return sum % prod


def mul_inv(a, b):
    b0 = b
    x0, x1 = 0, 1
    if b == 1: return 1
    while a > 1:
        q = a // b
        a, b = b, a%b
        x0, x1 = x1 - q * x0, x0
    if x1 < 0: x1 += b0
    return x1


n = []
a = []
for d in data:
    n.append(d.value)
    a.append(d.original_idx)

print(chinese_remained(n, a)
